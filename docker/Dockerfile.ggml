# docker build --rm -t inference-engines:ggml -f docker/Dockerfile.ggml .
# docker run --rm inference-engines:ggml

# Stage 1: Base dependencies
ARG UBUNTU_VERSION=24.04
FROM ubuntu:${UBUNTU_VERSION} AS base_dependencies

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV HOME=/root
ENV DEPENDENCIES_DIR=${HOME}/dependencies
ENV GGML_DIR=${DEPENDENCIES_DIR}/ggml

# Install system dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    cmake=3.* \
    build-essential \
    pkg-config \
    wget \
    git \
    unzip \
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    libopenblas-dev \
    libgoogle-glog-dev \
    libgtest-dev \
    ninja-build \
    libopencv-dev \
    libopencv-contrib-dev \
    && rm -rf /var/lib/apt/lists/*

# Build and install GTest
RUN cd /usr/src/gtest && \
    cmake . && \
    make && \
    cp lib/*.a /usr/lib/ || cp *.a /usr/lib/

# Stage 2: Install GGML
FROM base_dependencies AS ggml_install

# Clone and build GGML
RUN mkdir -p ${GGML_DIR} && \
    cd ${GGML_DIR} && \
    git clone https://github.com/ggerganov/ggml.git . && \
    mkdir -p build && \
    cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="${GGML_DIR}" \
        -DGGML_BLAS=ON \
        -DGGML_BLAS_VENDOR=OpenBLAS \
        -DGGML_CUDA=OFF \
        -DGGML_METAL=OFF \
        -DGGML_AVX=ON \
        -DGGML_AVX2=ON \
        -DGGML_F16C=ON \
        -DGGML_FMA=ON && \
    make -j$(nproc) && \
    make install

# Verify GGML installation
RUN test -f ${GGML_DIR}/lib/libggml-base.so && \
    test -f ${GGML_DIR}/lib/libggml-cpu.so && \
    test -f ${GGML_DIR}/lib/libggml-blas.so && \
    test -f ${GGML_DIR}/include/ggml.h

# Set GGML environment variables
ENV GGML_DIR=${GGML_DIR}
ENV LD_LIBRARY_PATH=${GGML_DIR}/lib
ENV PKG_CONFIG_PATH=${GGML_DIR}/lib/pkgconfig

# Stage 3: Download pre-built ONNX models
FROM ggml_install AS model_downloader

# Install wget for downloading models
RUN apt-get update && apt-get install -y wget && rm -rf /var/lib/apt/lists/*

# Create model directory
RUN mkdir -p /opt/models

# Download ResNet18 ONNX model from ONNX Model Zoo
RUN wget -O /opt/models/resnet18.onnx \
https://github.com/onnx/models/raw/refs/heads/main/validated/vision/classification/resnet/model/resnet18-v1-7.onnx

# Verify the model was downloaded
RUN ls -la /opt/models/ && \
    echo "ResNet18 ONNX model downloaded successfully"

# Stage 4: Build application
FROM model_downloader AS builder

WORKDIR /app

# Copy source code
COPY . .

# Build the project with GGML backend and tests enabled
RUN rm -rf build && \
    cmake -Bbuild -H. \
    -DDEFAULT_BACKEND=GGML \
    -DBUILD_INFERENCE_ENGINE_TESTS=ON \
    -DGGML_DIR=${GGML_DIR} \
    && cmake --build build --config Release -j$(nproc)

# Stage 5: Copy pre-downloaded models
FROM builder AS model_generator

# Copy the pre-downloaded ResNet18 ONNX model to test directory
WORKDIR /app/build/backends/ggml/test
RUN cp /opt/models/resnet18.onnx . && \
    echo "ResNet18 ONNX model copied to test directory"

# Stage 6: Final runtime image for testing
FROM ggml_install AS final

# Create non-root user
RUN useradd -m testuser && \
    mkdir -p /app && \
    chown -R testuser:testuser /app

# Copy built binaries and test files
COPY --from=model_generator --chown=testuser:testuser /app/build /app/build
COPY --from=model_generator --chown=testuser:testuser /app/backends/ggml/test /app/backends/ggml/test

# Copy GGML libraries and headers to final stage
COPY --from=ggml_install --chown=testuser:testuser ${GGML_DIR}/lib /opt/ggml/lib
COPY --from=ggml_install --chown=testuser:testuser ${GGML_DIR}/include /opt/ggml/include

# Set working directory to where the test files are located
WORKDIR /app/build/backends/ggml/test

# Switch to test user
USER testuser

# Set library path
ENV LD_LIBRARY_PATH=/app/build/lib:/opt/ggml/lib:$LD_LIBRARY_PATH

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD test -f /app/build/lib/libInferenceEngines.so || exit 1

# Default command to run GGML tests
CMD ["./GGMLInferTest"]
