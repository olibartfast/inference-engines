# docker build --rm -t neuriplo:opencvdnn -f docker/Dockerfile.opencvdnn .

# Stage 1: Base dependencies
ARG UBUNTU_VERSION=24.04
FROM ubuntu:${UBUNTU_VERSION} AS base_dependencies

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV HOME=/root
ENV DEPENDENCIES_DIR=${HOME}/dependencies

# Install system dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    cmake=3.* \
    build-essential \
    pkg-config \
    wget \
    git \
    unzip \
    python3 \
    python3-pip \
    python3-dev \
    python3-numpy \
    python3-opencv \
    libopencv-dev \
    libopencv-contrib-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    libeigen3-dev \
    libgoogle-glog-dev \
    libgtest-dev \
    && rm -rf /var/lib/apt/lists/*

# Build and install GTest
RUN cd /usr/src/gtest && \
    cmake . && \
    make && \
    cp lib/*.a /usr/lib/ || cp *.a /usr/lib/

# Stage 2: Build application
FROM base_dependencies AS builder

WORKDIR /app

# Copy source code
COPY . .

ARG BACKEND=OPENCV_DNN

# Build the project
RUN cmake -Bbuild -H. \
    -DDEFAULT_BACKEND=${BACKEND} \
    -DBUILD_INFERENCE_ENGINE_TESTS=ON \
    && cmake --build build --config Release \
    && echo "Checking build directory structure:" \
    && find /app/build -name "*InferTest*" -type f \
    && ls -la /app/build/backends/opencv-dnn/test/ 2>/dev/null || echo "opencv-dnn test directory not found" \
    && test -f /app/build/backends/opencv-dnn/test/OCVDNNInferTest || echo "OCVDNNInferTest executable not found"

# Stage 3: Final runtime image
FROM base_dependencies AS final

# Create non-root user
RUN useradd -m appuser && \
    mkdir -p /app/data && \
    mkdir -p /app/include && \
    mkdir -p /app/lib && \
    chown -R appuser:appuser /app

# Copy built library from builder stage
COPY --from=builder --chown=appuser:appuser /app/build/libneuriplo.so /app/lib/
# Copy public headers
COPY --from=builder --chown=appuser:appuser /app/include /app/include
# Copy test executable and test directory structure
COPY --from=builder --chown=appuser:appuser /app/build/backends/opencv-dnn/test/ /app/build/backends/opencv-dnn/test/

# Add metadata
LABEL version="0.1"
LABEL description="OpenCV DNN inference engine container"

# Set library path
ENV LD_LIBRARY_PATH=/app/lib:/usr/lib/x86_64-linux-gnu

# Create a verification script (do this before switching to appuser)
RUN echo '#!/bin/bash' > /usr/local/bin/verify-opencvdnn && \
    echo 'echo "OpenCV DNN dependencies:"' >> /usr/local/bin/verify-opencvdnn && \
    echo 'echo "System OpenCV installation"' >> /usr/local/bin/verify-opencvdnn && \
    echo 'echo "Available OpenCV libraries:"' >> /usr/local/bin/verify-opencvdnn && \
    echo 'ls -la /usr/lib/x86_64-linux-gnu/libopencv*.so* 2>/dev/null | head -10' >> /usr/local/bin/verify-opencvdnn && \
    echo 'echo ""' >> /usr/local/bin/verify-opencvdnn && \
    echo 'echo "OpenCV version:"' >> /usr/local/bin/verify-opencvdnn && \
    echo 'python3 -c "import cv2; print(f\"OpenCV version: {cv2.__version__}\")" 2>/dev/null || echo "Python OpenCV not available"' >> /usr/local/bin/verify-opencvdnn && \
    echo 'echo "Inference engine library:"' >> /usr/local/bin/verify-opencvdnn && \
    echo 'ls -la /app/lib/libneuriplo.so 2>/dev/null || echo "Library not found"' >> /usr/local/bin/verify-opencvdnn && \
    chmod +x /usr/local/bin/verify-opencvdnn

# Set working directory and user
WORKDIR /app
USER appuser

# Add volume for persistent data
VOLUME ["/app/data"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD test -f /app/lib/libneuriplo.so || exit 1

# Default command
CMD ["/bin/bash"]
